{
    "project": {},
    "files": {
        "lib/main.js": {
            "name": "lib/main.js",
            "modules": {},
            "classes": {
                "Extasy": 1
            },
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {},
    "classes": {
        "Extasy": {
            "name": "Extasy",
            "shortname": "Extasy",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "lib/main.js",
            "line": 10,
            "is_constructor": 1,
            "example": [
                "\n## Features\n\n### Accepts Constructor or Static Class Parents\nParent can be either a constructor or static class (ie constructor functions or object literals).\n\n#### Constructor Parents\nParent's prototype methods are placed on child's prototype (static methods if parent is object literal).\n\n\tfunction Child() {};\n\tfunction Parent() {};\n\textend(Child, Parent);\n\tvar ChildInst = new Child();\n\tassert(ChildInst.super_ === Parent.prototype);\n\tassert(ChildInst.hello === 'world');\n\n#### Static Parents\n\tfunction Child() {};\n\tvar Parent = {};\n\textend(Child, Parent);\n\tassert(Child.super_ === Parent);\n\tvar ChildInst = new Child();\n\tassert(ChildInst.constructor.super_ === Parent);\n\n#### Multiple Parents\n\n\tfunction Child() {};\n\tfunction Parent() {};\n\tParent.prototype.kinky = function () { return 'yes, ' + this.menage; };\n\tfunction Parent2() {};\n\tvar Parent3 = {menage: 'a trois'};\n\n\t// inherit\n\textend(Child, [Parent, Parent2, Parent3]);\n\tvar ChildInst = new Child();\n\n\tassert(Child.prototype.kinky === Parent.prototype.kinky);\n\tassert(ChildInst.constructor.prototype.kinky === Parent.prototype.kinky);\n\tassert(Child.kinky() === 'yes, a trois');\n\tassert(ChildInst.kinky() === 'yes, a trois');\n\n\n\n\n### Copies Constuctor* Parent's Instance Methods & Properties\nParent's instance methods are set as child instance methods if parent is a constructor class.\nDoes not do this for static classes because their 'instance' methods are put on the prototype\n\n\tfunction Child() {};\n\tfunction Parent() {};\n\tParent.prototype.random = 'randomness';\n\tParent.random = 'random';\n\tParent.bar = 'bar';\n\textend(Child, Parent);\n\n\t// differences child class vs instance\n\tvar ChildInst = new Child();\n\tassert(Child.bar === Parent.bar);\n\tassert(Child.super_ === undefined);\n\tassert(ChildInst.super_ !== undefined);\n\tassert(Child.random === Parent.random);\n\tassert(Child.random === 'random');\n\tassert(ChildInst.constructor.random === 'random');\n\tassert(ChildInst.super_.random === 'randomness');\n\n\n\n\n### Overloading\n\n####  Overloading Constructor Class Parent\n\tfunction Child() {};\n\tfunction Parent() {};\n\tParent.prototype.foo = function () { return 'father'; };\n\textend(Child, Parent);\n\n\t// extend the protoype after extending or else will fail...\n\tChild.prototype.foo = function () {\n\t\treturn 'you are my ' + this.super_.foo();\n\t}\n\n\t// initialise\n\tvar ChildInst = new Child();\n\tassert(ChildInst.foo() === 'you are my father');\n\n\t// overload\n\tChildInst.foo = function () {\n\t\treturn 'you WERE my ' + this.super_.foo();\n\t}\n\tassert(ChildInst.foo() === 'you WERE my father');\n\n\n#### Overloading Static Class Parent\n\tfunction Child() {};\n\tvar Parent = {foo: function () { return 'father'; }};\n\textend(Child, Parent);\n\n\t// can't overload thru prototype - need to do thru instance\n\tassert(Child.super_.foo === Parent.foo);\n\tassert(Child.prototype.foo === Parent.foo);\n\tChild.foo = function () {\n\t\treturn 'you are my ' + this.super_.foo();\n\t}\n\n\t// overloading instance\n\tvar ChildInst = new Child();\n\tassert(Child.foo() === 'you are my father');\n\tassert(ChildInst.constructor.foo() === 'you are my father');\n\n\n#### Overloading Multiple Parents\n\n\tfunction Child() {};\n\tfunction Parent() {};\n\tParent.prototype.kinky = function () { return 'yes, ' + this.menage; };\n\tfunction Parent2() {};\n\tvar Parent3 = {menage: 'a trois'};\n\n\t// inherit\n\textend(Child, [Parent, Parent2, Parent3]);\n\tvar ChildInst = new Child();\n\n\t// can't overload thru prototype - need to do thru instance\n\tassert(Child.super_.kinky === Parent.prototype.kinky);\n\tassert(Child.prototype.kinky === Parent.prototype.kinky);\n\n\t// class overloading\n\tChild.kinky = function () {\n\t\treturn 'Q: Is my parent kinky? A: ' + this.super_.kinky();\n\t};\n\tassert(Child.kinky() === 'Q: Is my parent kinky? A: yes, a trois');\n\tassert(ChildInst.kinky() !== 'Q: Is my parent kinky? A: yes, a trois');\n\n\t// instance overloading\n\tvar ChildInstOverload = new Child();\n\tt.equal(ChildInstOverload.kinky(),'yes, a trois');\n\tChildInstOverload.kinky = function () {\n\t\treturn 'Q: Is my class\\'s parent kinky? A: ' + this.constructor.super_.kinky();\n\t};\n\tt.equal(ChildInstOverload.kinky(),'Q: Is my class\\'s parent kinky? A: yes, a trois');"
            ],
            "params": [
                {
                    "name": "child",
                    "description": "Constructor function for child class that you want to create",
                    "type": "Constructor"
                },
                {
                    "name": "parent",
                    "description": "A single class or an array of classes that you want the child to inherit from. The paren(t's/ts') methods will be put on the child's prototype. If the parent is a dynamic class (ie uses a constructor function) then the parent's prototype methods will be put on the child's prototype. If the parent is a static class (ie an object literal) then it's static methods will be put on the child's prototype. If an array of classes is passed in then these will be flattened (ie a single parent class combining all the methods to be inherited will be created) before applying to the child's prototype.",
                    "type": "Class|Array"
                },
                {
                    "name": "staticProps",
                    "description": "Optional instance methods to give the class when instantiated (won't be put on proto). By default the paren(t's/ts') instance methods are applied to the child as instance methods",
                    "type": "[Object]"
                }
            ],
            "return": {
                "description": "The child class is returned",
                "type": "Class"
            }
        }
    },
    "classitems": [],
    "warnings": []
}